
@{
    ViewData["Title"] = "Thông báo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .nav-tree a {
        color: gray;
        text-decoration: none;
    }

    .list-group-item {   
        border-radius: 20px !important;
    }
    .lgi {
        background-color: #fbf1f1; /* Adjust as needed */
        border-radius: 20px;
        border: none;
    }

        .list-group-item:hover {
            background-color: #f8d9d6; /* Adjust as needed */
            border-radius: 20px;
        }

        .list-group-item a {
            text-decoration: none;
            color: #49130e;
        }
</style>
<script type="module">
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js';
    import { getDatabase, ref, onValue } from 'https://www.gstatic.com/firebasejs/10.12.2/firebase-database.js';
    const firebaseConfig = {
        databaseURL: "https://qldclb-770f5-default-rtdb.asia-southeast1.firebasedatabase.app/",
    };

    // Khởi tạo Firebase
    const app = initializeApp(firebaseConfig);
    const database = getDatabase(app);

    window.readUserDataByUserId = function (userId) {
        const notificationRef = ref(database, 'notification');
        onValue(notificationRef, (snapshot) => {
            const data = snapshot.val();
            const filteredData = filterDataByUserId(data, userId);
            displayData(filteredData);
        });
    };
    function filterDataByUserId(data, userId) {
        const filteredData = {};
        const keys = Object.keys(data);

        for (let i = keys.length - 1; i >= 0; i--) {
            const key = keys[i];
            if (data[key].uid === userId) {
                filteredData[key] = data[key];
            }
        }

        return filteredData;
    }

    function displayData(data) {
        const messageContainer = document.getElementById('messageContainer');
        messageContainer.innerHTML = ''; // Xóa nội dung cũ

        for (const key in data) {
            if (data.hasOwnProperty(key)) {
                
                const notification = data[key];
                const date = new Date(notification.time);

                // Sử dụng các phương thức của đối tượng Date để lấy ngày, tháng, năm, giờ, phút, giây
                const year = date.getFullYear();
                const month = ('0' + (date.getMonth() + 1)).slice(-2); // Tháng bắt đầu từ 0 nên cộng thêm 1 và format về dạng 2 chữ số
                const day = ('0' + date.getDate()).slice(-2); // Format về dạng 2 chữ số
                const hours = ('0' + date.getHours()).slice(-2); // Format về dạng 2 chữ số
                const minutes = ('0' + date.getMinutes()).slice(-2); // Format về dạng 2 chữ số
                const seconds = ('0' + date.getSeconds()).slice(-2); // Format về dạng 2 chữ số

                // Tạo định dạng ngày tháng bạn mong muốn, ví dụ: 'YYYY-MM-DD HH:mm:ss'
                const formattedDateTime = `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;
                const messageElement = document.createElement('div');
                messageElement.innerHTML = `<a href="/Account/OrderDetail/${notification.link}" class="list-group-item list-group-item-action"><p>${formattedDateTime}</p>
                    <p>${notification.message}</p>
                </a>`;
                messageContainer.appendChild(messageElement);
            }
        }
    }
</script>
<div class="p-3 p-sm-4 p-lg-5" style="padding-top:0!important;">
    <div class="row">
        <nav style="--bs-breadcrumb-divider: '>'; padding-top:20px" aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item nav-tree"><a href="/Home/Index">Trang chủ</a></li>
                <li class="breadcrumb-item nav-tree"><a href="/Account/Edit/@ViewBag.uid">Tài khoản</a></li>
                <li class="breadcrumb-item nav-tree" aria-current="page">Thông báo</li>
            </ol>
        </nav>
    </div>
    <div class="row">
        <div class="col-md-4">
            <ul class="list-group" style="border-radius:20px">
                <li class="list-group-item lgi"><a href="/Account/Edit/">Tài khoản</a></li>
                <li class="list-group-item lgi"><a href="/Account/History">Lịch sử đơn hàng</a></li>
                <li class="list-group-item lgi"><a href="/Account/ChangePassword">Mật khẩu và bảo mật</a></li>
                <li class="list-group-item lgi"><a asp-action="FavoriteProduct" asp-controller="Account">Sản phẩm yêu thích</a></li>
                <li style="background-color: #f8d9d6;" class="list-group-item lgi current"><a asp-action="Notification" asp-controller="Account"><b>Thông báo</b></a></li>
                
            </ul>
        </div>
        <div class="col-md-8 " style="">
            <h5>Thông báo</h5>
            <div style="margin-bottom:20px;">
                <a>Những cập nhật về đơn hàng.</a>
            </div>
            <div class="list-group" id="messageContainer">
                <a href="#" class="list-group-item list-group-item-action">Chưa có thông báo</a>
            </div>
            <script type="text/javascript">
                // Hàm gọi để lọc thông báo theo UserId
                function filterNotifications(userId) {
                    if (userId) {
                        window.readUserDataByUserId(userId);
                    } else {
                        
                    }
                }

                // Gọi hàm filterNotifications với UserId từ ViewBag (hoặc nguồn khác)
                document.addEventListener('DOMContentLoaded', function () {
                    const userId = '@ViewBag.uid'; // Thay thế bằng giá trị thực tế của UserId
                    filterNotifications(userId);
                });
            </script>
        </div>
    </div>
</div>

